checking job id 25055547 for the past 10 days
found in /var/spool/torque/job_logs/20210213
<Jobinfo>
	<Job_Id>25055547.torque01.util.production.int.aci.ics.psu.edu</Job_Id>
	<Job_Name>grserver</Job_Name>
	<Job_Owner>jcn23@ood-poc-01.util.production.int.aci.ics.psu.edu</Job_Owner>
	<resources_used>
		<cput>0</cput>
		<energy_used>0</energy_used>
		<mem>135080kb</mem>
		<vmem>1299116kb</vmem>
		<walltime>17406</walltime>
	</resources_used>
	<job_state>C</job_state>
	<queue>batch</queue>
	<server>torque01.util.production.int.aci.ics.psu.edu</server>
	<Account_Name>wff3_b_g_bc_default</Account_Name>
	<Checkpoint>u</Checkpoint>
	<ctime>1613244383</ctime>
	<Error_Path>ood-poc-01.util.production.int.aci.ics.psu.edu:/storage/home/jcn23/ondemand/data/sys/dashboard/batch_connect/sys/rserver-test/output/5687ada4-4134-46fe-abe5-ea7b63d1045d/output.log</Error_Path>
	<exec_host>comp-bc-0382/7,13,15-16</exec_host>
	<exec_port>15003</exec_port>
	<Hold_Types>0</Hold_Types>
	<Join_Path>oe</Join_Path>
	<Keep_Files>n</Keep_Files>
	<Mail_Points>a</Mail_Points>
	<mtime>1613261930</mtime>
	<Output_Path>ood-poc-01.util.production.int.aci.ics.psu.edu:/storage/home/jcn23/ondemand/data/sys/dashboard/batch_connect/sys/rserver-test/output/5687ada4-4134-46fe-abe5-ea7b63d1045d/output.log</Output_Path>
	<Priority>0</Priority>
	<qtime>1613244383</qtime>
	<Rerunable>1</Rerunable>
	<Resource_List>
		<walltime>14400</walltime>
		<nodes>1:ppn=4:basic:rhel7</nodes>

		<nodect>1</nodect>
		<neednodes>1:ppn=4:basic:rhel7</neednodes>
		<procct>0</procct>
		<pmem>4gb</pmem>
	</Resource_List>
	<session_id>3928</session_id>
	<Shell_Path_List>/bin/bash</Shell_Path_List>
	<substate>59</substate>
	<Variable_List>PBS_O_QUEUE=batch,PBS_O_HOME=/storage/home/jcn23,PBS_O_LOGNAME=root,PBS_O_PATH=/var/www/ood/apps/sys/dashboard/vendor/bundle/ruby/bin:/opt/rh/v8314/root/usr/bin:/opt/rh/git19/root/usr/bin:/opt/rh/nodejs010/root/usr/bin:/opt/rh/rh-ruby22/root/usr/bin:/opt/rh/rh-passenger40/root/usr/bin:/opt/rh/rh-passenger40/root/usr/sbin:/opt/rh/nginx16/root/usr/bin:/opt/rh/nginx16/root/usr/sbin:/sbin:/bin:/usr/sbin:/usr/bin,PBS_O_MAIL=/var/mail/root,PBS_O_SHELL=/bin/bash,PBS_O_LANG=C,PBS_O_INITDIR=/storage/home/jcn23/ondemand/data/sys/dashboard/batch_connect/sys/rserver-test/output/5687ada4-4134-46fe-abe5-ea7b63d1045d,PBS_O_WORKDIR=/storage/home/j/jcn23/ondemand/data/sys/dashboard/batch_connect/sys/rserver-test/output/5687ada4-4134-46fe-abe5-ea7b63d1045d,PBS_O_HOST=ood-poc-01.util.production.int.aci.ics.psu.edu,PBS_O_SERVER=torque01.util.production.int.aci.ics.psu.edu</Variable_List>
	<euser>jcn23</euser>
	<egroup>jcn23</egroup>
	<hashname>25055547.torque01.util.production.int.aci.ics.psu.edu</hashname>
	<hop_count>1</hop_count>
	<queue_rank>23923514</queue_rank>
	<queue_type>E</queue_type>
	<etime>1613244383</etime>
	<exit_status>271</exit_status>
	<submit_args>-d /storage/home/jcn23/ondemand/data/sys/dashboard/batch_connect/sys/rserver-test/output/5687ada4-4134-46fe-abe5-ea7b63d1045d -N grserver -S /bin/bash -o /storage/home/jcn23/ondemand/data/sys/dashboard/batch_connect/sys/rserver-test/output/5687ada4-4134-46fe-abe5-ea7b63d1045d/output.log -j oe -A wff3_b_g_bc_default -W x=advres: -l walltime=04:00:00 -l nodes=1:ppn=4:basic:rhel7 -l qos= /tmp/qsub.20210213-24461-1ytgud6</submit_args>
	<start_time>1613244524</start_time>
	<start_count>1</start_count>
	<fault_tolerant>0</fault_tolerant>
	<comp_time>1613261930</comp_time>
	<job_radix>0</job_radix>
	<total_runtime>17407.769188</total_runtime>
	<submit_host>ood-poc-01.util.production.int.aci.ics.psu.edu</submit_host>
	<init_work_dir>/storage/home/j/jcn23/ondemand/data/sys/dashboard/batch_connect/sys/rserver-test/output/5687ada4-4134-46fe-abe5-ea7b63d1045d</init_work_dir>
	<request_version>1</request_version>
	<req_information></req_information>
	<x>advres:</x>
	<job_script>
module purge
export PATH="/opt/TurboVNC/bin:$PATH"
export WEBSOCKIFY_CMD="/usr/bin/websockify"
#export WEBSOCKIFY_CMD="/usr/local/websockify/run"
cd /storage/home/jcn23/ondemand/data/sys/dashboard/batch_connect/sys/rserver-test/output/5687ada4-4134-46fe-abe5-ea7b63d1045d

# Export useful connection variables
export host
export port

# Generate a connection yaml file with given parameters
create_yml () {
  echo "Generating connection YAML file..."
  (
    umask 077
    echo -e "host: $host\nport: $port\npassword: $password\ndisplay: $display\nwebsocket: $websocket\nspassword: $spassword" > "/storage/home/jcn23/ondemand/data/sys/dashboard/batch_connect/sys/rserver-test/output/5687ada4-4134-46fe-abe5-ea7b63d1045d/connection.yml"
  )
}

# Cleanliness is next to Godliness
clean_up () {
  echo "Cleaning up..."
  [[ -e "/storage/home/jcn23/ondemand/data/sys/dashboard/batch_connect/sys/rserver-test/output/5687ada4-4134-46fe-abe5-ea7b63d1045d/clean.sh" ]] && source "/storage/home/jcn23/ondemand/data/sys/dashboard/batch_connect/sys/rserver-test/output/5687ada4-4134-46fe-abe5-ea7b63d1045d/clean.sh"

  vncserver -list | awk '/^:/{system("kill -0 "$2" 2>/dev/null || vncserver -kill "$1)}'
  [[ -n ${display} ]] && vncserver -kill :${display}

  [[ ${SCRIPT_PID} ]] && pkill -P ${SCRIPT_PID} || :
  pkill -P $$
  exit ${1:-0}
}

# Source in all the helper functions
source_helpers () {
  # Generate random integer in range [$1..$2]
  random_number () {
    shuf -i ${1}-${2} -n 1
  }
  export -f random_number

  # Check if port $1 is in use
  port_used () {
    local port="${1#*:}"
    local host=$((expr "${1}" : '\(.*\):' || echo "localhost") | awk 'END{print $NF}')
    nc -w 2 "${host}" "${port}" < /dev/null &> /dev/null
  }
  export -f port_used

  # Find available port in range [$2..$3] for host $1
  # Default: [2000..65535]
  find_port () {
    local host="${1:-localhost}"
    local port=$(random_number "${2:-2000}" "${3:-65535}")
    while port_used "${host}:${port}"; do
      port=$(random_number "${2:-2000}" "${3:-65535}")
    done
    echo "${port}"
  }
  export -f find_port

  # Wait $2 seconds until port $1 is in use
  # Default: wait 30 seconds
  wait_until_port_used () {
    local port="${1}"
    local time="${2:-30}"
    for ((i=1; i<=time*2; i++)); do
      if port_used "${port}"; then
        return 0
      fi
      sleep 0.5
    done
    return 1
  }
  export -f wait_until_port_used

  # Generate random alphanumeric password with $1 (default: 32) characters
  create_passwd () {
    tr -cd '[:alnum:]' < /dev/urandom 2> /dev/null | head -c${1:-32}
  }
  export -f create_passwd
}
export -f source_helpers

source_helpers

# Set host of current machine
host=$(hostname)

# Setup one-time use passwords and initialize the VNC password
function change_passwd () {
  echo "Setting VNC password..."
  password=$(create_passwd 8)
  spassword=${spassword:-$(create_passwd 8)}
  (
    umask 077
    echo -ne "${password}\n${spassword}" | vncpasswd -f > "vnc.passwd"
  )
}
change_passwd

# Start up vnc server (if at first you don't succeed, try, try again)
echo "Starting VNC server..."
for i in $(seq 1 10); do
  # Clean up any old VNC sessions that weren't cleaned before
  vncserver -list | awk '/^:/{system("kill -0 "$2" 2>/dev/null || vncserver -kill "$1)}'

  # Attempt to start VNC server
  VNC_OUT=$(vncserver -log "vnc.log" -rfbauth "vnc.passwd" -nohttpd -noxstartup  2>&1)
  VNC_PID=$(pgrep -s 0 Xvnc) # the script above will daemonize the Xvnc process
  echo "${VNC_OUT}"

  # Sometimes Xvnc hangs if it fails to find working disaply, we
  # should kill it and try again
  kill -0 ${VNC_PID} 2>/dev/null && [[ "${VNC_OUT}" =~ "Fatal server error" ]] && kill -TERM ${VNC_PID}

  # Check that Xvnc process is running, if not assume it died and
  # wait some random period of time before restarting
  kill -0 ${VNC_PID} 2>/dev/null || sleep 0.$(random_number 1 9)s

  # If running, then all is well and break out of loop
  kill -0 ${VNC_PID} 2>/dev/null && break
done

# If we fail to start it after so many tries, then just give up
kill -0 ${VNC_PID} 2>/dev/null || clean_up 1

# Parse output for ports used
display=$(echo "${VNC_OUT}" | awk -F':' '/^Desktop/{print $NF}')
port=$((5900+display))

echo "Successfully started VNC server on ${host}:${port}..."

[[ -e "/storage/home/jcn23/ondemand/data/sys/dashboard/batch_connect/sys/rserver-test/output/5687ada4-4134-46fe-abe5-ea7b63d1045d/before.sh" ]] && source "/storage/home/jcn23/ondemand/data/sys/dashboard/batch_connect/sys/rserver-test/output/5687ada4-4134-46fe-abe5-ea7b63d1045d/before.sh"


echo "Script starting..."
DISPLAY=:${display} "/storage/home/jcn23/ondemand/data/sys/dashboard/batch_connect/sys/rserver-test/output/5687ada4-4134-46fe-abe5-ea7b63d1045d/script.sh" &
SCRIPT_PID=$!

[[ -e "/storage/home/jcn23/ondemand/data/sys/dashboard/batch_connect/sys/rserver-test/output/5687ada4-4134-46fe-abe5-ea7b63d1045d/after.sh" ]] && source "/storage/home/jcn23/ondemand/data/sys/dashboard/batch_connect/sys/rserver-test/output/5687ada4-4134-46fe-abe5-ea7b63d1045d/after.sh"

# Launch websockify websocket server
echo "Starting websocket server..."
websocket=$(find_port)
${WEBSOCKIFY_CMD:-/opt/websockify/run} -D ${websocket} localhost:${port}

# Set up background process that scans the log file for successful
# connections by users, and change the password after every
# connection
echo "Scanning VNC log file for user authentications..."
while read -r line; do
  if [[ ${line} =~ "Full-control authentication enabled for" ]]; then
    change_passwd
    create_yml
  fi
done < <(tail -f --pid=${SCRIPT_PID} "vnc.log") &


# Create the connection yaml file
create_yml

# Wait for script process to finish
wait ${SCRIPT_PID} || clean_up 1

# Exit cleanly
clean_up



	</job_script>
</Jobinfo>

